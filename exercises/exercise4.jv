pipeline climate_analysis {

    weather_measurement_downloader
        -> weather_measurement_zip_extractor
        -> weather_measurement_csv_picker
        -> weather_measurement_text_interpreter
        -> weather_measurement_csv_interpreter
        -> weather_measurement_column_deleter
        -> weather_measurement_column_renamer
        -> weather_measurement_table_interpreter
        -> weather_measurement_temperature_transformer
        -> weather_measurement_battery_temperature_transformer
        -> weather_measurement_loader;

    // Step 1: Download the data from the provided URL
    block weather_measurement_downloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Step 2: Extract the downloaded zip file
    block weather_measurement_zip_extractor oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Step 3: Select the CSV file from the extracted data
    block weather_measurement_csv_picker oftype FilePicker {
        path: "/data.csv";
    }

    // Step 4: Interpret the file as a text file
    block weather_measurement_text_interpreter oftype TextFileInterpreter {}

    // Step 5: Interpret the text file as a CSV file with ";" delimiter
    block weather_measurement_csv_interpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // Step 6: Delete unnecessary columns by specifying the exact columns (corrected approach)
    block weather_measurement_column_deleter oftype ColumnDeleter {
         delete: [column F, column G, column H, column I];
    }

    // Step 7: Rename columns to English (corrected approach)
    block weather_measurement_column_renamer oftype CellWriter {
        at: range A1:F1;
        write: ['id', 'producer', 'model', 'month', 'temperature', 'battery_temperature'];
    }

    // Step 8: Interpret the table with specified column types
    block weather_measurement_table_interpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype Month,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    // Step 9: Define a value type for positive integers
    valuetype PositiveInteger oftype integer {
        constraints: [ Positive ];
    }
    constraint Positive oftype RangeConstraint {
        lowerBound: 1;
        lowerBoundInclusive: true;
    }

    // Step 10: Define a value type for months (1-12)
    valuetype Month oftype integer {
        constraints: [ MonthConstraint ];
    }
    constraint MonthConstraint oftype RangeConstraint {
        lowerBound: 1;
        upperBound: 12;
        upperBoundInclusive: true;
    }

    // Step 11: Transformer to convert Celsius to Fahrenheit
    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }

    // Step 12: Transform the 'temperature' column values from Celsius to Fahrenheit
    block weather_measurement_temperature_transformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    // Step 13: Transform the 'battery_temperature' column values from Celsius to Fahrenheit
    block weather_measurement_battery_temperature_transformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    // Step 14: Load the final data into a SQLite database
    block weather_measurement_loader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}
